"""
Структура данных - математическая абстракция, необходимая для описания
способов хранения каких-либо элементов.

Статический массив - недеформируемая структура данных, которая представляется в виде непрерывной области памяти
с произвольным доступом (массивы хранят элементы одного типа).

Динамический массив - деформируемая структура данных, ....

Массив = Статический массив + Динамический массив

Преимущества массивов:
1) Произвольный доступ
2) Константное время предоставления доступа к любому элементу

Недостатки массивов:
1) При деформации размера массива - необходимо каждый раз искать нвоое место для хранения
всей структуры
2) Операции вставки - разная для добавления в разные части массива

Массивов в природе не существует!
В языках программирвоания существуют только РЕАЛИЗАЦИИ массивов.
Массивы принадлежат к семейству структр данных с произвольным доступом.
"""

"""
Структуры данных с последовательным доступом.
ОДНО-Связный список - структура данных с последовательным доступом к элементам, в контексте данной
структуры существует только ОДНО выделенное направление перебора элементов.

ДВУ-Связный список - -//- существует два варианта движения по элементам (от H к T, и от T к H)

Стэк и очередь - представители структур данных с последовательным доступом, которыми
очень часто пользуются разработчики.

Стэк - последовательная структура данных, устроенная по модели LIFO*.
*LIFO - Last In First Out

Преимущества и недостатки стэка:
* Преимущества:
1) Операция добавления/удаления нового элемента имеет практически константное время (
    не зависит от размера стэка в принципе)

* Недостатки:
2) Долгий доступ к элементам, которые находятся в начале стэка



Очередь - последовательная структура данных, устроенная по модели FIFO*
* FIFO - First In First Out
Преимущества и недостатки точно такие же как и у стэка.


Хеш-таблица - структура данных из семейства произвольного доступа, представляющаяся в виде пар
ключ: значение (хранит однотипные пары).

Требуется постоянная проверка уникальности ключа и соответствующего значения.
"""

from collections import deque 


stack = deque([10, 20, 30])
stack.append(20)
stack.append(30)
stack.pop()
print(stack)


queue = deque([10, 20, 30])
queue.append(40)
queue.popleft()
print(queue)

class Queue:
    def __init__(self):
        self.__elements = [] 

    def add(self, elem:str):
        self.__elements.append(elem)

    def popleft(self):
        if self.is_not_empty():
            return self.__elements.pop(0)

    def is_not_empty(self):
        return len(self.__elements) > 0

    def __str__(self):
        #[str(elem) for elem in self.__elements] - списочное выражение
        #list(map(lambda x : str(x), self.__elements)) - функция map()
        return "Queue<" + ", ".join(list(map(lambda x : str(x), self.__elements))) +">"
    


    
s = Queue()
s.add(10)
s.add(20)
s.add(30)
print(s)
elem = s.popleft()

print(s, "and", elem)
